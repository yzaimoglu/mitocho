package components

import "strings"
import "fmt"

type ButtonType string
type ButtonColor string
type ButtonTextColor string
type ButtonSize string
type ButtonId string
type ButtonParams struct {
	BId    ButtonId
	BColor ButtonColor
	BText  ButtonTextColor
	BType  ButtonType
	BSize  ButtonSize
	BClass string
}

// ButtonType
var (
	BTypeStandard    ButtonType = "default"
	BTypeAlternative ButtonType = "alternative"
	BTypeDark        ButtonType = "dark"
	BTypeLight       ButtonType = "light"
	BTypeCustom      ButtonType = "custom"
)

// ButtonColor
var (
	BColorBlue   ButtonColor = "blue"
	BColorGreen  ButtonColor = "green"
	BColorRed    ButtonColor = "red"
	BColorOrange ButtonColor = "orange"
	BColorPurple ButtonColor = "purple"
	BColorGray ButtonColor = "gray"
)

// ButtonTextColor
var (
	BTextWhite ButtonTextColor = "white"
	BTextGray  ButtonTextColor = "gray-900"
)

// ButtonSize
var (
	BSizeXs ButtonSize = "xs"
	BSizeSm ButtonSize = "sm"
	BSizeMd ButtonSize = "md"
	BSizeLg ButtonSize = "lg"
	BSizeXl ButtonSize = "xl"
)

templ Button(text string, buttonParams *ButtonParams) {
	switch buttonParams.BType {
		default:
			@standardButton(text)
		case BTypeAlternative:
			@alternativeButton(text)
		case BTypeDark:
			@darkButton(text)
		case BTypeLight:
			@lightButton(text)
		case BTypeCustom:
			@customButton(text, *buttonParams)
	}
}

func getParametrizedButtonClass(params ButtonParams) string {
	if params.BSize == "" {
		params.BSize = BSizeMd
	}
	if params.BColor == "" {
		params.BColor = BColorBlue
	}
	if params.BText == "" {
		params.BText = BTextWhite
	}
	var size string
	standardClasses := "focus:outline-none focus:ring-4 font-medium rounded-lg"
	switch params.BSize {
	case BSizeXs:
		size = "px-3 py-2 text-xs"
	case BSizeSm:
		size = "px-3 py-2 text-sm"
	default:
		size = "px-5 py-2.5 me-2 mb-2 text-sm"
	case BSizeLg:
		size = "px-5 py-3 text-base"
	case BSizeXl:
		size = "px-6 py-3.5 text-base"
	}

	base := fmt.Sprintf("%s %s", standardClasses, size)
	textColor := fmt.Sprintf("text-%s", string(params.BText))
	base = fmt.Sprintf("%s %s", base, textColor)
	backgroundColor := strings.ReplaceAll("focus:ring-%c-300 dark:bg-%c-600 dark:hover:bg-%c-700 dark:focus:ring-%c-800 bg-%c-700 hover:bg-%c-800", "%c", string(params.BColor))
	base = fmt.Sprintf("%s %s", base, backgroundColor)
	if params.BClass != "" {
		base = fmt.Sprintf("%s %s", base, string(params.BClass))
	}
	return base
}

templ standardButton(text string) {
	<button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800">{ text }</button>
}

templ alternativeButton(text string) {
	<button type="button" class="py-2.5 px-5 me-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">{ text }</button>
}

templ darkButton(text string) {
	<button type="button" class="text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700">{ text }</button>
}

templ lightButton(text string) {
	<button type="button" class="text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700">{ text }</button>
}

templ customButton(text string, params ButtonParams) {
	if params.BId != "" {
		<button id={ string(params.BId) } type="button" class={ getParametrizedButtonClass(params) }>{ text }</button>
	} else {
		<button type="button" class={ getParametrizedButtonClass(params) }>{ text }</button>
	}
}
